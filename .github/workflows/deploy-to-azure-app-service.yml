# Deploy to App Service using GitHub Actions official document
# https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel

name: Deploy OrchardCore CMS with a custom theme to Azure App Service

# This workflow is triggered on pushing to develop branch
on:
  push:
    branches:
      - develop
env:
  AZURE_WEBAPP_NAME: orchard-core-example # Set this to your app service's name
  WEB_PROJECT_DIR: ${{github.workspace}}/Codesanook.OrchardCoreExample # Set this to the path of your web app project, defaults to the repository root
  DOTNET_VERSION: 3.1.x # Set this to the dot net version to use
  NODE_VERSION: 14.x # Set this to the Node.js version to use

jobs:
  build:
    runs-on: ubuntu-latest

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_iddefaultsrun
    # You can use default run to set default working directory
    #defaults:
    #  run:
    #    working-directory: ${{env.WEB_PROJECT_DIR}}

    steps:
      # Checkout the repo
      - uses: actions/checkout@master

      # Set up Node.js
      # https://github.com/actions/setup-node
      - name: Use Node.js version ${{env.NODE_VERSION }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.NODE_VERSION}}

      # Yarn command already installed in OS image
      # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md#package-management
      # https://github.com/actions/virtual-environments/blob/main/images/linux/scripts/installers/nodejs.sh

      # Build all Node.js projects with Yarn workspaces
      # https://classic.yarnpkg.com/en/docs/cli/workspaces/#toc-yarn-workspaces-run

      - name: Build all Node.js projects with Yarn Workspaces
        run: |
          node --version
          yarn install
          yarn workspaces run build

      # Setup .NET Core SDK
      # https://github.com/actions/setup-dotnet
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.DOTNET_VERSION}} 
      
      # Build and publish .NET project
      - name: Restore Nuget packages
        run: |
            pwd
            ls
            dotnet restore
        working-directory: ${{env.WEB_PROJECT_DIR}}

      - name: Build with dotnet
        run: dotnet build --configuration Release
        working-directory: ${{env.WEB_PROJECT_DIR}}

      - name: dotnet publish
        run: dotnet publish -c Release -o ./publish
        working-directory: ${{env.WEB_PROJECT_DIR}}

      # !!! TODO Deploy with custom Docker image 
      # https://docs.microsoft.com/en-us/azure/app-service/deploy-container-github-action?tabs=publish-profile

      # Deploy to Azure App Service
      - name: Run Azure webapps deploy action using publish profile credentials
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{env.AZURE_WEBAPP_NAME}}
          # secrets.AZURE_WEBAPP_PUBLISH_PROFILE is a secret variable defined in repository settings
          # How to create Generate deployment credentials 
          # https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
          # As of October 2020, Linux web apps will need the app setting WEBSITE_WEBDEPLOY_USE_SCM set to true before downloading the publish profile. 
          # This requirement will be removed in the future.
          publish-profile: ${{secrets.AZURE_WEBAPP_PUBLISH_PROFILE}} 
          package: ${{env.WEB_PROJECT_DIR}}/publish

